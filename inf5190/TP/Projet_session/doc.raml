#%RAML 1.0
title: API des établissements alimentaires condamnés de la Ville de Montréal
baseUri: http://localhost:5000/api

uses:
  assets: assets.lib.raml

annotationTypes:
  monitoringInterval:
    type: integer

types:
  User:
    type: object
    properties:
      nom_complet:
        description: Nom et prénom de l'utilisateur
        required: true
        type: string
      email:
        description: Email de l'utilisateur
        required: true
        type: string
      etablissements:
        description: Liste des établissements à surveiller
        required: true
        type: array
        properties:
          type: string
      password:
        description: Mot de passe de l'utilisateur
        required: true
        type: string
  Demande:
    type: object
    properties:
      nom_etablissement:
        description: Nom d'établissement
        required: true
        type: string
      adresse:
        description: Adresse de l'établissement
        required: true
        type: string
      ville:
        description: ville où se situe l'établissement
        required: true
        type: string
      date_visite:
        description: Date de la visite du client
        required: true
        type: string
      nom:
        description: Nom du client
        required: true
        type: string
      prenom:
        description: Prénom du client
        required: true
        type: string
      description_probleme:
        description: Description du problème observé
        required: true
        type: string

/api:
  /contrevenants:
    get:
      description: Récupère la liste des contrevenants entre deux dates spcécifiées en paramètres.
      queryParameters:
        du:
          description: Date de début
          required: true
          type: string
          example: 2020-05-08
        au:
          description: Date de fin
          required: true
          type: string
          example: 2022-05-15
      responses:
        200:
          description: La requête s'est bien passée.
          body:
            application/json:
              example: |
                        [{
                          "adresse": "1806 Rue Sainte-Catherine Ouest, Montréal, Québec",
                          "business_id": 115363,
                          "categorie": "Restaurant",
                          "date": "2020-09-10",
                          "date_jugement": "2021-10-07",
                          "date_statut": "2017-04-19",
                          "description": "Le lieu ou le véhicule doit être exempt de contaminants, de polluants, de toute espèce d'animaux y compris les insectes et les rongeurs ou de leurs excréments.",
                          "etablissement": "RESTAURANT ETOILES DES INDES ENR.",
                          "id_poursuite": 7843,
                          "montant": 1000,
                          "proprietaire": "9353-8783 QUEBEC INC.",
                          "statut": "Ouvert",
                          "ville": "Montréal"
                        }]
        400:
          description: La requête est mal écrite. Les dates sont spécifiées selon le format ISO 8601.

  /contrevenant:
    get:
      description: Récupère la liste des contrevenants selon le nom d'établissement passé en paramètre.
      queryParameters:
        name:
          description: Nom d'établissement
          required: true
          type: string
          example: BURGER KING
      responses:
        200:
          description: La requête s'est bien passée.
          body:
            application/json:
              example: |
                        [{
                          "adresse": "1806 Rue Sainte-Catherine Ouest, Montréal, Québec",
                          "business_id": 115363,
                          "categorie": "Restaurant",
                          "date": "2020-09-10",
                          "date_jugement": "2021-10-07",
                          "date_statut": "2017-04-19",
                          "description": "Le lieu ou le véhicule doit être exempt de contaminants, de polluants, de toute espèce d'animaux y compris les insectes et les rongeurs ou de leurs excréments.",
                          "etablissement": "RESTAURANT ETOILES DES INDES ENR.",
                          "id_poursuite": 7843,
                          "montant": 1000,
                          "proprietaire": "9353-8783 QUEBEC INC.",
                          "statut": "Ouvert",
                          "ville": "Montréal"
                        }]
        400:
          description: La requête est mal écrite.
  /etablissements:
    /json:
      get:
        description: Affiche la liste des établissements ayant commis une ou plusieurs infractions au format json.
        responses:
          200:
            description: La requête s'est bien passée.
            body:
              application/json:
    /xml:
      get:
        description: Affiche la liste des établissements ayant commis une ou plusieurs infractions au format xml.
        responses:
          200:
            description: La requête s'est bien passée.
            body:
              application/xml:
    /csv:
      get:
        description: Affiche la liste des établissements et  ayant commis une ou plusieurs infractions au format csv.
        responses:
          200:
            description: La requête s'est bien passée.
            body:
              text/csv:
  /demande:
    post:
      description: Réalisez une demande d'inspection à la ville de Montréal.
      body:
        application/json:
          type: Demande
          example: {"nom_etablissement": "BURGER KING", "adresse": "203 Victoria St", "ville": "Montréal", "date_visite": 2023-01-01, "nom": "Monsieur", "prenom": "Propre", "description_probleme": "Il y a une pésence de rats."}
      responses:
        201:
          description: La demande a été correctement envoyée.
          body:
            application/json:
              example: |
                     {
                      "adresse": "800 Victoria Street",
                      "date_visite": "2023-08-30",
                      "description_probleme": "Il y a des rats",
                      "id": 2,
                      "nom": "Gaëtan",
                      "nom_etablissement": "Macdo",
                      "prenom": "Oueyeya",
                      "ville": "Longueil"
                     }
        400:
          description: La requête n'est pas correctement écrite.
    /{id}:
      delete:
        description: Supprimer une demande spécifiée avec son id.
        responses:
          200:
            description: La demande a été correctement supprimée.
          404:
            description: La demande spécifiée par son id n'existe pas.

  /utilisateur:
    post:
      description: Créez vous un compte utilisateur.
      body:
        application/json:
          type: User
          example : {"nom_complet": "John Doe", "email": "jdoe@gmail.com", "etablissements" : ["La Banquise", "St Viateur Bagel"],  "password" : "test123"}
      responses:
        201:
          description: Le compte utilisateur a correctement été créé.
        409:
          description: L'email entré existe déja.
